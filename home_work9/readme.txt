Обмін даними між кількома об'єктами

Мета: Навчитися організовувати комунікацію між кількома об'єктами, познайомитися з QDateTime, QFile

Основна ідея задачі:

потрібно реалізувати аналітику і логування даних, які поступають від системи сенсорів(датчиків).

Вимоги до логування:

1. виводити дані в консоль

2. писати дані в файл, кожний запуск програми створює новий файл. минулий файл перезаписувати не потрібно!

    для спрощення - не обов'язково роботи обменення на роозмір файла лога.

3. формати запису даних 

     2024-08-04 12:41:38 | name=Sensor_1  | value=111

     2024-08-04 12:41:39 | name=Sensor_2  | value=10

 ---- 

де перша колонка це дата і час отримання даних, друга колонка: назва сенсора, value: значення від сенсора

Вимоги до аналітики:

1. вивід аналітики в консоль позапиту.

2. що потрібно виводити:

    - max, min, середнє арифметичне, медіана значень, по кожному сенсору і по всім сенсорам

3. для спрощення, дані для аналітики будемо зберігатися в пам'яті. максимальна кількість записів обмежена 10К.

всі константи, налаштуваня винести в окремий файл- Config.hpp. для спрощення всі налаштування будуть статичні 

-------

1. Створіть клас SensorMetric, який інкапсулює дані від сенсора, SensorMetric буду передаватися сигналом

2. Створіть клас Sensor, який має сигнал dataReady(const SensorMetric& aSensorMetric).

    метод void newData(int value) - обновляє дані від сенсора і геренує сигнал 

3. Створіть клас Analyzer, який має слот analyzeData(const SensorMetric& aSensorMetric).

   метод reportPrint - виводить аналітику по сенсорам

4. Створіть клас Logger, який має слот writeData(const SensorMetric& aSensorMetric).

5. Підключіть сигнал від Sensor до слотів Analyzer і Logger.

6. Симулюйте отримання даних від кількох сенсорів, для прикладу провести симуляцяю кілька секунд, щоб мати змогу вивести аналітику  

--------Інтерфейси класів--------

конструктори класів були пропущені, їх потрібно самостійно реалізувати

      

        


      
struct SensorMetric{
    QString     name;   // назва сенсора
    int         value;  // значення яке генерує сенсор 
};

class Sensor : public QObject{
    Q_OBJECT
public:
    void newData(int value);
signals:
    void dataReady(const SensorMetric& aSensorMetric);
}

class Logger : public QObject{
    Q_OBJECT
public slots:
    void writeData(const SensorMetric& aSensorMetric) 
}

class Analyzer : public QObject{
    Q_OBJECT
public:
    void reportPrint() const;
public slots:
    void analyzeData(const SensorMetric& aSensorMetric);
}

    

---------------

додаткові вимогу до коду!!!

- назва кожної змінної, методу , функція  має відображати її сутність, щоб по назві можна було зрозуміти що це за змінна, що робить цей метод, функція

- жодних назв в одну-дві  літери, окрім випадків, коли це може бути доречно.

- жодних магічних змінних!

Передача складних структур через сигнали і слоти в Qt здійснюється за допомогою механізму метаоб'єктів (Qt's Meta-Object System), що дозволяє використовувати користувацькі типи даних у сигналах і слотах. Щоб це працювало, потрібно виконати кілька кроків:

1. Оголосити структуру та зареєструвати її в метаоб'єктній системі за допомогою макросу `Q_DECLARE_METATYPE`.

2. Зареєструвати структуру за допомогою `qRegisterMetaType`.

3. Використовувати структуру в сигналах і слотах як параметр.

// Реєструємо структуру в метаоб'єктній системі

Q_DECLARE_METATYPE(SensorMetric)

// Реєструємо структуру під час виконання

qRegisterMetaType<SensorMetric>("SensorMetric");

Q_DECLARE_METATYPE

https://doc.qt.io/qt-6/qmetatype.html#Q_DECLARE_METATYPE

qRegisterMetaType

https://doc.qt.io/qt-6/qmetatype.html#qRegisterMetaType-2

https://dou.ua/lenta/columns/about-logging/